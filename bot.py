import asyncio
import aiogram
import random
import logging
import os
from aiohttp import web
from dotenv import load_dotenv
from assets.laws import law_list
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN", "your_token")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", "https://yourdomain.com")  # –í–∞—à –¥–æ–º–µ–Ω
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEB_SERVER_HOST = os.getenv("WEB_SERVER_HOST", "127.0.0.1")
WEB_SERVER_PORT = int(os.getenv("WEB_SERVER_PORT", 8080))

# –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: webhook –∏–ª–∏ polling
USE_WEBHOOK = os.getenv("USE_WEBHOOK", "false").lower() == "true"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã <code>–ú–æ—è —Å—Ç–∞—Ç—å—è</code>. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ —è –≤–∞–º –æ—Ç–ø—Ä–∞–≤–ª—é —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç–∞—Ç—å—é –£–ö –†–§ —Å –≤–∞—à–∏–º –Ω–∏–∫–æ–º.", parse_mode=ParseMode.HTML)

@dp.message(F.text.lower().contains('–º–æ—è —Å—Ç–∞—Ç—å—è'))
async def cmd_mc(message: Message):
    user_id = message.from_user.id
    user_fullname = message.from_user.full_name
    user_link = f'tg://user?id={user_id}'
    await message.answer(f"ü§∑‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è <a href='{user_link}'>{user_fullname}</a> –ø—Ä–∏–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è –∫ —Å—Ç–∞—Ç—å–µ {random.choice(law_list)}", parse_mode=ParseMode.HTML)

@dp.message()
async def cmd_error(message: Message):
    if message.chat.type == 'private':
        await message.answer("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É <code>–ú–æ—è —Å—Ç–∞—Ç—å—è</code>, –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ —è –Ω–µ –∑–Ω–∞—é.", parse_mode=ParseMode.HTML)
    else:
        pass

@dp.inline_query()
async def inline_query_handler(query: InlineQuery):
    results = [
        InlineQueryResultArticle(
            id="1",
            title="–ú–æ—è —Å—Ç–∞—Ç—å—è",
            input_message_content=InputTextMessageContent(
                message_text=f"ü§∑‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è —è –ø—Ä–∏–≥–æ–≤–∞—Ä–∏–≤–∞—é—Å—å –∫ —Å—Ç–∞—Ç—å–µ {random.choice(law_list)}", parse_mode=ParseMode.HTML
            )
        )
    ]
    await query.answer(results=results, is_personal=True, cache_time=0)

async def health_check(request):
    return web.Response(text="OK")

async def on_shutdown():
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    await bot.session.close()

async def on_startup():
    if USE_WEBHOOK:
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞: {WEBHOOK_URL}")
        await bot.set_webhook(
            url=WEBHOOK_URL,
            drop_pending_updates=True,
            allowed_updates=["message", "callback_query", "inline_query"]
        )
        logger.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
    else:
        # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling")

async def start_webhook():
    app = web.Application()
    app.router.add_get("/health", health_check)
    app.router.add_get("/", health_check)
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)

    setup_application(app, dp, bot=bot)

    await on_startup()

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, WEB_SERVER_HOST, WEB_SERVER_PORT)

    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {WEB_SERVER_HOST}:{WEB_SERVER_PORT}")
    logger.info(f"–í–µ–±—Ö—É–∫ URL: {WEBHOOK_URL}")

    try:
        await site.start()
        await asyncio.Event().wait()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        await on_shutdown()
        await runner.cleanup()

async def start_polling():
    await on_startup()

    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        await dp.start_polling(bot, drop_pending_updates=True)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        await on_shutdown()

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info(f"–í–µ—Ä—Å–∏—è aiogram: {aiogram.__version__}")
    logger.info(f"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {'Webhook' if USE_WEBHOOK else 'Polling'}")

    if USE_WEBHOOK:
        await start_webhook()
    else:
        await start_polling()

if __name__ == "__main__":
    import aiogram
    asyncio.run(main())
