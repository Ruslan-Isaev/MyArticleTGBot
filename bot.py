import ukrf
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
import random
import config
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.TOKEN)
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã <code>–ú–æ—è —Å—Ç–∞—Ç—å—è</code>. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ —è –≤–∞–º –æ—Ç–ø—Ä–∞–≤–ª—é —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç–∞—Ç—å—é –£–ö –†–§ —Å –≤–∞—à–∏–º –Ω–∏–∫–æ–º.", parse_mode=ParseMode.HTML)

@dp.message(F.text.lower().contains('–º–æ—è —Å—Ç–∞—Ç—å—è'))
async def cmd_mc(message: Message):
    user_id = message.from_user.id
    user_fullname = message.from_user.full_name
    user_link = f'tg://user?id={user_id}'
    await message.answer(f"ü§∑‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è <a href='{user_link}'>{user_fullname}</a> –ø—Ä–∏–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è –∫ —Å—Ç–∞—Ç—å–µ {random.choice(ukrf.ukrflist)}", parse_mode=ParseMode.HTML)

@dp.message()
async def cmd_error(message: Message):
    if message.chat.type == 'private':
        await message.answer("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É <code>–ú–æ—è —Å—Ç–∞—Ç—å—è</code>, –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ —è –Ω–µ –∑–Ω–∞—é.", parse_mode=ParseMode.HTML)
    else:
        pass

@dp.inline_query()
async def inline_query_handler(query: InlineQuery):
    results = [
        InlineQueryResultArticle(
            id="1",
            title="–ú–æ—è —Å—Ç–∞—Ç—å—è",
            input_message_content=InputTextMessageContent(
                message_text=f"ü§∑‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è —è –ø—Ä–∏–≥–æ–≤–∞—Ä–∏–≤–∞—é—Å—å –∫ —Å—Ç–∞—Ç—å–µ {random.choice(ukrf.ukrflist)}", parse_mode=ParseMode.HTML
            )
        )
    ]
    await query.answer(results=results, is_personal=True, cache_time=0)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
